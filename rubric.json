{
    "id": "6fa267fe-5014-4fc2-b49f-2758b0cf3545",
    "requirements": "The core contributions of the paper have been reproduced.",
    "weight": 1,
    "sub_tasks": [
        {
            "id": "48768a7c-03e3-44b3-a703-73429e76ad3c",
            "requirements": "A convolutional neural network (CNN) has been implemented to encode the state of the ALE environments, as described in Section 4.1 and Appendix E.1.",
            "weight": 1,
            "sub_tasks": [
                {
                    "id": "4747029a-a3db-4abe-8610-8727dbc34456",
                    "requirements": "A CNN has been implemented and is used to encode the state of both ALE environments to a low-dimensional vector.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "d92c7aa0-6a11-4141-a8f3-bc9b12bf4d37",
                            "requirements": "The CNN has three convolutional layers with 32, 64 and 64 channels and filter sizes of 8, 4 and 3 respectively.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "2eaeb892-c348-4acd-b603-30cbdd9f8ffc",
                            "requirements": "The CNN has a final dense layer with an output dimension of 512.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        }
                    ],
                    "task_category": null
                },
                {
                    "id": "2c2ef685-8326-4773-bb21-68f3e7a527b3",
                    "requirements": "Logic to use a single CNN encoder per policy has been implemented, where the encoder for a new policy is initialized with the weights of the previous one, as described in Appendix E.2.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development"
                },
                {
                    "id": "1f4b310c-b311-42e0-a8f6-4e4e931cb6a5",
                    "requirements": "The output of the encoder is an input to both CompoNet (actor) as well as the value function (critic).",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development"
                }
            ],
            "task_category": null
        },
        {
            "id": "d72e33eb-e03b-4b11-a71c-f8f534802dca",
            "requirements": "The CompoNet architecture has been implemented, as described in Section 4.",
            "weight": 4,
            "sub_tasks": [
                {
                    "id": "dbbb11b3-c045-4e46-b2cc-cc1f652d84bf",
                    "requirements": "A matrix $\\Phi^{k;s}$ of size $(k-1) \\times |A|$ is defined which stores the output vectors of all preceding $k - 1$ modules for the current state, where $k$ is the number of tasks seen so far (including the current one) and $A$ is the action space.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development"
                },
                {
                    "id": "f0afda32-51d9-434d-be8e-5eb3ab5e72d3",
                    "requirements": "Logic to compute $h_s \\in \\mathbb{R}^{d_{\\text{enc}}}$ has been implemented, where $h_s$ is computed by the CNN encoder when encoding is needed (i.e., for the Arcade Learning Environment tasks) and $h_s = s$ when no encoder is needed (i.e., for the Meta-World tasks).",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development"
                },
                {
                    "id": "7033f8ba-4a41-422b-a2ba-446a70419dc7",
                    "requirements": "The output attention head has been implemented, as described in Section 4.2 -- \"Output Attention Head\".",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "e2b6885f-18d8-415f-a1c8-7988de3b8f55",
                            "requirements": "The logic to compute the query vector for the output attention head has been implemented.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "dda77699-d443-4fbf-90f4-59841597db57",
                                    "requirements": "A parameter matrix $W_{out}^Q$ is defined with shape $d_{enc} \\times d_{model}$ where $d_{enc}$ is the size of the encoded state vector and $d_{model}$ is the hidden size of the model.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "7ce56b99-e970-469c-8031-09d4697acf3e",
                                    "requirements": "The query vector is computed via $q = h_s W_{out}^Q$ where $h_s$ is the encoded state vector.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "78f79c80-50ea-4798-9630-3f2eacbc37c7",
                            "requirements": "The logic to compute the key vector for the output attention head has been implemented.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "060b1284-6e1b-4692-bd53-64e043c07fd3",
                                    "requirements": "A parameter matrix $W_{out}^K$ is defined with shape $|A| \\times d_{model}$ where $A$ is the action space and $d_{model}$ is the hidden size of the model.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "cde1da9b-47ce-4d8d-80c4-ab2a0cb678b0",
                                    "requirements": "A cosine positional embedding matrix $E_{out}$ of size $(k-1) \\times |A|$ is defined.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "0b8be057-bf1b-44fe-9d9f-0f4ca535d12b",
                                    "requirements": "The key vector is computed via $(\\Phi^{k;s} + E_{out}) W_{out}^Q$.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "48b73614-82f1-4d32-b2af-427ab51924b9",
                            "requirements": "The logic to compute the value vector for the output attention head has been implemented, which is defined as $\\Phi^{k;s}$ (the matrix of outputs from all previous modules).",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "76fa75da-2e3e-4260-9e2f-09ad3e0e9259",
                            "requirements": "The output vector $v$ for the output attention head is computed via $\\text { Attention }(\\mathbf{q}, K, V)=\\text{softmax}\\left(\\frac{q K^T}{\\sqrt{d_{\\text {model }}}}\\right) V$.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "bd7db785-3a65-42bc-bbf8-f3818a19700a",
                            "requirements": "The only learnable parameters for the output attention head are $W_{out}^Q$ and $W_{out}^K$.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        }
                    ],
                    "task_category": null
                },
                {
                    "id": "3bb3588c-fd1c-48af-bd78-6ea28892e8d3",
                    "requirements": "The input attention head has been implemented, as described in Section 4.2 -- \"Input Attention Head\".",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "d68e4314-52f6-4e6d-9aa3-a85f0bd9706d",
                            "requirements": "A matrix $P$ is defined as the row-wise concatenation of the output of the previous block (i.e., the output attention head) and $\\Phi^{k;s}$ (the matrix of outputs from all previous modules).",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "96caed0d-028e-4809-8cc4-c498a1e574be",
                            "requirements": "The logic to compute the query vector for the input attention head has been implemented.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "cf3c7ec9-b96a-4a89-a688-b7ba1bb56148",
                                    "requirements": "A parameter matrix $W_{in}^Q$ is defined with shape $d_{enc} \\times d_{model}$ where $d_{enc}$ is the size of the encoded state vector and $d_{model}$ is the hidden size of the model.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "ef07a797-146a-479d-9b9f-cfb2bef36599",
                                    "requirements": "The query vector is computed via $q = h_s W_{in}^Q$ where $h_s$ is the encoded state vector.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "68916539-efd7-40d0-8cd9-7d4a38db4b24",
                            "requirements": "The logic to compute the key vector for the input attention head has been implemented.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "83e80a16-d7bb-4e57-809b-be04bccacd9a",
                                    "requirements": "A parameter matrix $W_{in}^K$ is defined with shape $|A| \\times d_{model}$ where $A$ is the action space and $d_{model}$ is the hidden size of the model.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "b40e5cba-8422-4aa1-a638-44e515d99f27",
                                    "requirements": "A cosine positional embedding matrix $E_{in}$ of the same size as $P$ is defined.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "a75ab485-bbc2-4932-ab22-6be8c55498e3",
                                    "requirements": "The key vector is computed via $(P + E_{in}) W_{in}^K$.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "b6563c0b-6d8c-4d2d-a77d-4f00d422daf1",
                            "requirements": "The logic to compute the value vector for the input attention head has been implemented.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "eeb5aa73-4d41-49f5-ad43-05cfc3246084",
                                    "requirements": "A parameter matrix $W_{in}^V$ is defined with shape $|A| \\times d_{model}$ where $A$ is the action space and $d_{model}$ is the hidden size of the model.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "467eb0c9-00c4-4aea-b508-4a7c2669f31b",
                                    "requirements": "The value vector is computed via $P W_{in}^V$.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "2c041f24-2aed-4128-ba54-b27407f67db8",
                            "requirements": "The output vector for the input attention head is computed via $\\text { Attention }(\\mathbf{q}, K, V)=\\text{softmax}\\left(\\frac{q K^T}{\\sqrt{d_{\\text {model }}}}\\right) V$.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "a6657076-1593-46c2-bac7-c83f69d44797",
                            "requirements": "The only learnable parameters for the input attention head are $W_{in}^Q$, $W_{in}^K$ and $W_{in}^V$.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        }
                    ],
                    "task_category": null
                },
                {
                    "id": "60dbb6d0-f111-481e-96ca-37097c01f418",
                    "requirements": "The internal policy has been implemented, as described in Section 4.2 -- \"Internal Policy\"",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "d861366a-340a-4fc8-9c02-ce0ad39c844e",
                            "requirements": "The encoded state vector $h_s$ and the output of the input attention head module are concatenated column-wise, creating a vector of size $d_{enc} + d_{model}$.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "0d54e498-4838-450f-a17b-59ac2155855b",
                            "requirements": "A multi-layer feed-forward block is implemented which maps a vector of length $d_{enc} + d_{model}$ to one of length $|A|$, where |A| is the dimensionality of the action space.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "b2387837-a2b3-41d0-8866-0516d7cb1067",
                            "requirements": "The only learnable parameters for the internal policy are those in the multi-layer feed-forward block.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        }
                    ],
                    "task_category": null
                },
                {
                    "id": "5eb4989c-fa80-497f-935d-b27397ce63b8",
                    "requirements": "An $|A|$-dimension vector is computed by adding the output of the internal policy module, a vector of size $|A|$, to the output from the output attention head, the vector previously denoted as $v$.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development"
                },
                {
                    "id": "74545ee1-9594-4d2f-89f0-374f8f48c745",
                    "requirements": "Logic to normalize the summed vectors has been implemented for continuous action spaces.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development"
                }
            ],
            "task_category": null
        },
        {
            "id": "22c628c1-8d24-486d-9b64-728c87cb37f5",
            "requirements": "The evaluation metrics and experimental setup has been implemented, as described in Section 5.",
            "weight": 2,
            "sub_tasks": [
                {
                    "id": "a05a315c-973f-4b0a-bf6a-0a41c4186a4e",
                    "requirements": "The average performance, forward transfer and reference forward transfer metrics have been implemented, as described in Section 5.1.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "78a7d9d6-a74d-42a0-95ac-3ce39fe31dae",
                            "requirements": "The average performance metric has been computed, as described in Section 5.1 -- \"Average Performance\".",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "37d0398b-02ff-45cb-a378-9229584fcfb3",
                                    "requirements": "The success rate for task $i$ at timestep $t$, $p_i(t)$, is available for all timesteps and is taken as an input, which corresponds to the success rate in task $i$ at time $t$.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "0f95bb2e-1c2f-4394-a367-3d61dc8de2c4",
                                    "requirements": "The average performance at timestep $t$ is computed as $P(t) = \\frac{1}{N} \\sum_{i=1}^N p_i(t)$",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "feb94a88-a1da-4059-ac19-1e4bc992ea62",
                            "requirements": "The forward transfer metric has been implemented, as described in Section 5.1 -- \"Forward Transfer\".",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "09cd146f-2424-4bb1-b844-a3268856492d",
                                    "requirements": "The success rate for task $i$ at timestep $t$, $p_i(t)$, is available for all timesteps and is taken as an input, which corresponds to the success rate in task $i$ at time $t$.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "3f61bfcd-04a9-4b08-a4c9-614b901315c0",
                                    "requirements": "The baseline (i.e., training a randomly initialized NN for each task) success rate for each task, $p_i^b(t)$, is taken as an input, which corresponds to the success rate of the baseline method in task $i$ at time $t$.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "07c21e51-90f4-43c4-986f-4d572829ffef",
                                    "requirements": "The area under the success curve ($\\mathrm{AUC}_i=\\frac{1}{\\Delta} \\int_{(i-1) \\cdot \\Delta}^{i \\cdot \\Delta} p_i(t) \\mathrm{d} t$) for each task is computed, as described in Equation (2) of Section 5.1.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "dbe45d3b-284d-40d2-9422-c3f4c75b1540",
                                    "requirements": "The area under the baseline success curve ($\\mathrm{AUC}_i^b=\\frac{1}{\\Delta} \\int_0^{\\Delta} p_i^b(t) \\mathrm{d} t$) for each task is computed, as described in Equation (2) of Section 5.1.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "a16438be-02e0-49b4-b3d4-bbbe6f53b6af",
                                    "requirements": "The forward transfer metric $\\mathrm{FTr}_i=\\frac{\\mathrm{AUC}_i-\\mathrm{AUC}_i^b}{1-\\mathrm{AUC}_i^b}$ has is computed, as described in Equation (2) of Section 5.1.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "95be9084-519d-4d14-ad6e-1cf9c747bcca",
                            "requirements": "The reference forward transfer metric has been implemented, as described in Section 5.1 -- \"Reference Forward Transfer\".",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "05714e8d-caa5-4f88-b903-8595f1692b34",
                                    "requirements": "The forward transfers, $\\text{FTr}(j,i)$, obtained by training a model from scratch on the $j$-th task and fine-tuning it on the $i$-th task are taken as inputs for all $i$ and $j$ such that $1 \\leq j < i \\leq N$.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "c76c362b-3f12-4420-a651-49cce1f7aac4",
                                    "requirements": "Code for computing the reference forward transfer ($\\mathrm{RT}=\\frac{1}{N} \\sum_{i=2}^N \\max _{j<i} \\mathrm{FTr}(j, i)$) has been implemented, as described in Equation (3) of Section 5.1.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        }
                    ],
                    "task_category": null
                },
                {
                    "id": "f63fe199-5c7c-42f4-bff5-156ba3356dd6",
                    "requirements": "All tasks from Meta-World and the Arcade Learning Environment (ALE) have been configured and can built, as described in Section 5.2 and Appendix D.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "9a641d0b-b6f7-4294-9c10-2f102fe5feb4",
                            "requirements": "All Meta-World environments described in Section 5.2 and Appendix D are accessible in code using their correct state and action spaces, as described in Section 5.2 and Appendix D.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "b4a291ec-3107-47c4-9b0e-c52296727875",
                                    "requirements": "All 10 Meta-World environments can be built and use the correct state and action spaces, as described in Appendix D.1.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "6ddede73-5b5b-43aa-b780-71d757075a38",
                                            "requirements": "The `hammer-v2` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "58e40d55-b575-48cd-83c5-5052aaca3a32",
                                            "requirements": "The `push-wall-v2` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "cf4a1d8a-cb3f-4643-a38c-1c37f99999a0",
                                            "requirements": "The `faucet-close-v2` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "ec9d8fb8-eb16-4226-877b-0d6a0a597338",
                                            "requirements": "The `push-back-v2` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "6c4b5eda-8a21-46f1-a779-46daf3012377",
                                            "requirements": "The `stick-pull-v2` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "e40a1748-6930-40b5-9031-7568c443be95",
                                            "requirements": "The `handle-press-side-v2` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "55a82758-0e16-4f6e-ac19-a0d69103c53e",
                                            "requirements": "The `push-v2` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "0ada4859-64de-4816-9c5a-c858a74b368f",
                                            "requirements": "The `shelf-place-v2` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "86d36b98-9296-4c21-a4ee-397f8d7cce0f",
                                            "requirements": "The `window-close-v2` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "f2ed8992-c22f-46a6-8fa6-faf86b3698c4",
                                            "requirements": "The `peg-unplug-side-v2` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "d1f984f0-9a75-451d-9fe2-a20e1a445909",
                                    "requirements": "The logic to generate a sequence of 20 tasks (i.e., a sequence of all 10 Meta-World environments repeated repeated twice) has been implemented, as described in Section 5.2.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "09240921-d50d-4490-b1df-84f206fe7eb5",
                                    "requirements": "All 10 tasks in the sequence run for 1M timesteps each for a total of 20M timesteps, as described in Section 5.2.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "915fdd73-cc58-4166-bea6-b729a159383d",
                                    "requirements": "The Metaworld module (https://github.com/Farama-Foundation/Metaworld) is used to define the environments.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "8f85639e-037f-4ac3-9149-e186c0ae1d0e",
                            "requirements": "All ALE environments are accessible in code with the correct observation and action spaces, as described in Section 5.2 and Appendix D.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "46b2113b-4bd6-447d-8db0-07f57fedf9e3",
                                    "requirements": "All ALE environments can be built, use the correct observation and action spaces and have all playing modes available, as described in Appendix D.2 and Appendix D.3.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "65452b97-b69a-4045-ac89-90d44bfa2fc9",
                                            "requirements": "The `ALE/SpaceInvaders-v5` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "5b6e2970-2c60-4199-8fec-63070948738f",
                                            "requirements": "The `ALE/Freeway-v5` environment can be built using `gym.make`.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "f7c172f9-372e-4d43-8fa0-64d692abf65c",
                                    "requirements": "The logic to generate a sequence of 17 tasks (i.e., a sequence of all 10 playing modes of `ALE/SpaceInvaders-v5` followed by all 7 playing modes of `ALE/Freeway-v5`) has been implemented, as described in Section 5.2.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "e4ba16c0-4d0e-4340-9624-cef226ae7d17",
                                    "requirements": "All 17 tasks in the sequence run for 1M timesteps each for a total of 17M timesteps, as described in Section 5.2.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "db4ec248-1f0a-4cea-8716-8bd96e347c05",
                                    "requirements": "The Gymnasium module (https://github.com/Farama-Foundation/Gymnasium) is used to define the environments.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        }
                    ],
                    "task_category": null
                },
                {
                    "id": "093428b8-d3c3-45b7-8864-731224f07b51",
                    "requirements": "The SAC and PPO algorithms have been implemented by adapting the implementation from Huang et al. (2022), as described in Appendix E.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "8359b6e6-433e-4cab-8540-0526799f2b50",
                            "requirements": "The SAC algorithm has been implemented by adapting the implementation from Huang et al. (2022), as described in Appendix E.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "b57de4fc-b531-48b4-b4ab-c685126baf65",
                                    "requirements": "The SAC implementation from Huang et al. (2022) has been adapted to use the CompoNet as an agent.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "d99f41a7-6157-4ba6-9b5c-52f5ac11c5d3",
                                    "requirements": "The SAC implementation from Huang et al. (2022) has been further adapted to be compatible with all 10 Meta-World environments used in the paper. TODO: Clarify the specific modifications made with the author.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "9fe63a30-dd3d-4889-a8c3-8dd04a57c8f1",
                                    "requirements": "The critic network has been implemented as a two-layer MLP followed by two separate output heads of a single layer corresponding to the mean and logarithm of the standard deviation of a normal distribution.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "8e3005cb-80b8-4a8c-a333-134c85dfed37",
                                    "requirements": "The hyperparameters for SAC have been set to those stated in Table E.1.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "520bdc4d-1240-4e8a-8f4d-ce3690d5c246",
                                            "requirements": "In the SAC implementation, the optimizer is set to Adam with $beta_1=0.9$ and $beta_2=0.999$.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "0be98dd1-1403-4cc1-9c4c-000d06187801",
                                            "requirements": "In the SAC implementation, the discount rate ($\\gamma$) is set to 0.99.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "e7a7f7c3-6d53-4c68-8a58-bcb39249fdc5",
                                            "requirements": "In the SAC implementation, the maximum and minimum standard deviations for the policy are set to $\\exp{2}$ and $\\exp{-20}, respectively.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "b3569d2d-1799-4842-8bc8-a9edbc5d2043",
                                            "requirements": "In the SAC implementation, the activation function is set to ReLU.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "83b0ab19-62d1-4eff-982d-53a73493a824",
                                            "requirements": "In the SAC implementation,  the hidden dimension ($d_{\\text{model}}$) is set to 256,",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "1144f4b3-0db8-4b1b-8845-b3577b6115fd",
                                            "requirements": "In the SAC implementation, the batch size is set to 128.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "ad325742-df92-4160-8ed3-d4879f63c22f",
                                            "requirements": "In the SAC implementation, the buffer size is set to $10^6$.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "18b4b952-24c1-4a53-bbc9-024a56978135",
                                            "requirements": "In the SAC implementation, the target smoothing coefficient ($\\tau$) is set to 0.005.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "1c84cd05-a435-4fe1-ad81-fa4dc3f0bd4c",
                                            "requirements": "In the SAC implementation, the entropy regularization coefficient ($\\alpha$) is set to 0.2.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "a735bab4-0624-404a-aca4-b87842654474",
                                            "requirements": "In the SAC implementation, auto-tuning of the entropy regularization coefficient ($\\alpha$) is enabled.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "b49c1a3a-e280-41f7-bb65-a1568fa173a3",
                                            "requirements": "In the SAC implementation, the policy update frequency is set to 2.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "72f5c11c-ec26-4fdc-be40-ea41351c560f",
                                            "requirements": "In the SAC implementation, the target network update frequency is set to 1.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "330eea86-52b8-4511-9123-b66a3857db0e",
                                            "requirements": "In the SAC implementation, the noise clip parameter is set to 0.5.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "eac55aec-805d-4b31-8ae3-7b9158a40d6c",
                                            "requirements": "In the SAC implementation, the number of random actions is set to $10^4$.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "1fb99226-8c58-4097-9a98-85dc6f64aaf1",
                                            "requirements": "In the SAC implementation, the timestep to start learning is set to $5 \\times 10^3$.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "1df005b8-7e5f-4161-bd38-bca97c72a061",
                                            "requirements": "In the SAC implementation, there are 3 layers in the target network.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "98c55d23-669d-4f17-9b96-a47318faadd8",
                                            "requirements": "In the SAC implementation, there are 3 layers in the critic network.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "652d8621-d466-400c-a2b8-100c02f042d6",
                                            "requirements": "In the SAC implementation, the actors learning rate is set to $10^{-3}$.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "85760c29-b7fc-4d86-9555-e40cf1607d6f",
                                            "requirements": "In the SAC implementation, the Q-networks' learning rate is set to $10^{-3}$.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        }
                                    ],
                                    "task_category": null
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "5e1d17c1-a0bf-4e08-83ee-e5e86f68404e",
                            "requirements": "The PPO algorithm has been implemented by adapting the implementation from Huang et al. (2022), as described in Appendix E.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "90f271f7-eba5-4a1e-a105-2212eb5f351f",
                                    "requirements": "The PPO implementation from Huang et al. (2022) has been adapted to use the CompoNet as an agent.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "4f2a00e0-423d-4bc2-b674-03e970b79568",
                                    "requirements": "The PPO implementation from Huang et al. (2022) has been further adapted to be compatible with both ALE environments used in the paper: `ALE/SpaceInvaders-v5` and `ALE/Freeway-v5`. TODO: Clarify the specific modifications made with the author.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "93d94ac7-8757-47cd-88da-cbedb56ca63b",
                                    "requirements": "Two single-layer output heads are used to generate the logits of the categorical distribution over the action space (actor) and to compute the value function (critic).",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "8ce79c32-bc21-469d-86cb-238b5b0551cd",
                                    "requirements": "The hyperparameters for PPO have been set to those stated in Table E.2.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "04a582b9-5473-4d89-a2ff-c7e924acfd55",
                                            "requirements": "In the PPO implementation, the optimizer has been set to AdamW.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "b5c20ebb-50da-4022-aed6-4cf969d67ad9",
                                            "requirements": "In the PPO implementation, the $beta_1$ and $beta_2$ parameters of AdamW are set to 0.9 and 0.999 respectively.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "24277bc2-8e61-457e-af20-c13d18cab57a",
                                            "requirements": "In the PPO implementation, the maximum gradient norm is set to 0.5.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "b181f0b9-54d1-4030-8ed3-b52ef0f54b1a",
                                            "requirements": "In the PPO implementation, the discount rate ($\\gamma$) has been set to 0.99.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "529ab85f-d8a7-40f3-a3a9-b1b3d34d6cc6",
                                            "requirements": "In the PPO implementation, the activation function has been set to ReLU.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "61cf8fe3-10e8-414e-9b01-5f12b6e89bf1",
                                            "requirements": "In the PPO implementation, the hidden dimension ($d_{model}) is set to 512.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "9d838de5-2888-4431-8b57-5bb00dffe3a0",
                                            "requirements": "In the PPO implementation, the learning rate is set to $2.5 \\cdot 10^{-4}$.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "d8b7555f-3b55-4214-908b-e588e394c1cc",
                                            "requirements": "In the PPO implementation, the PPO value function coefficient is set to 0.5.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "0193f558-fbfb-407d-acc5-5f122c306beb",
                                            "requirements": "In the PPO implementation, the GAE ($\\lambda$) is set to 0.95.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "940b2a8a-03be-4bfd-8cbe-abb88206f55c",
                                            "requirements": "In the PPO implementation, the number of parallel environments is set to 8.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "27f990db-3c95-4443-a9e0-74cae3cc7798",
                                            "requirements": "In the PPO implementation, the batch size is set to 1024.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "eda94d3e-be8e-476b-a1b1-fc4034bd69f7",
                                            "requirements": "In the PPO implementation, the number of update epochs is set to 4.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "97903a43-5146-4ed5-8fdf-73aa04792903",
                                            "requirements": "In the PPO implementation, the PPO clipping coefficient is set to 0.2.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "b159646a-15bb-41a2-b041-455aadb3819e",
                                            "requirements": "In the PPO implementation, the PPO entropy coefficient is set to 0.01.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "c68146ee-62e0-436e-981c-afe6a4b5f65f",
                                            "requirements": "In the PPO implementation, learning rate annealing is enabled.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "23e124f9-b156-4da0-80ba-b6fdaea6e4bc",
                                            "requirements": "In the PPO implementation, the value loss is clipped.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "a06953ec-2fd7-4806-96c0-831260cd57ed",
                                            "requirements": "In the PPO implementation, advantage estimates are normalized.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "f7bb6f64-757c-441d-9ae3-1df0adf3135e",
                                            "requirements": "In the PPO implementation, the number of steps per rollout is set to 128.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        }
                                    ],
                                    "task_category": null
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "610e3c57-b4db-4628-89fb-1d47ad8c7d23",
                            "requirements": "The critic network has been implemented and configured correctly.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "f94431f2-3d7d-482c-bf47-119f41e084d1",
                                    "requirements": "Logic to reset the critic network at the beginning of each task has been implemented.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "6e11bcd2-0a64-48b5-a9dc-7a345f615917",
                                    "requirements": "The value function (critic) has been implemented as a single fully connected layer.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "e78a823d-9418-4df4-ab5a-af008c73b952",
                                            "requirements": "In the case of the Meta-World environments, the layer maps a 39-dimensional state vector down to a single scalar.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "9db10e5b-a00b-4a6e-b011-fdd7d1c56e6d",
                                            "requirements": "In the case of the ALE environments, the layer maps an image of size 210x160 down to a single scalar.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        }
                                    ],
                                    "task_category": null
                                }
                            ],
                            "task_category": null
                        }
                    ],
                    "task_category": null
                },
                {
                    "id": "a19f6d48-f429-49e6-a39f-c9a021a20362",
                    "requirements": "All benchmark methods have been implemented, as described in Section 5.2 and Appendix E.2.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "e59457f1-81e5-49ee-967a-cc429248107b",
                            "requirements": "The baseline method has been implemented for the Meta-World and ALE environments, as described in Section 5.2 and Appendix E.2.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "97ddc4c5-192e-4faf-9fb0-628b63411a87",
                                    "requirements": "The baseline method has been implemented for the Meta-World environments, which is a randomly initialized MLP that maps a 39-dimensional state vector to two separate heads: one outputting the mean of a Gaussian distribution for each of the 4 actions and another outputting the log standard deviations.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "0345c389-bef7-4968-98bd-7c76912dffa5",
                                    "requirements": "The baseline method has been implemented for the ALE environments, which is a randomly intialized MLP mapping a 512-dimensional state vector to a 6-dimensional action space. The network outputs logits for a categorical distribution over these 6 actions.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "96dbde05-2acb-4fde-a279-74e326a2254d",
                                    "requirements": "The baseline method has been implemented such that a randomly initialized neural network is trained from scratch for each task.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "ed765c12-a43b-42fe-9105-382ecabf068b",
                            "requirements": "FT-1 has been implemented for the Meta-World and ALE environments, as described in Section 5.2 and Appendix E.2.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "63030bd7-0708-45a6-b40d-c8ab3f46b88f",
                                    "requirements": "The FT-1 method has been implemented for the Meta-World environments, which is a randomly initialized MLP that maps a 39-dimensional state vector to two separate heads: one outputting the mean of a Gaussian distribution for each of the 4 actions and another outputting the log standard deviations.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "73ae5d74-de2e-4427-82af-1b1d7f5217e8",
                                    "requirements": "The FT-1 method has been implemented for the ALE environments, which is a randomly intialized MLP mapping a 512-dimensional state vector to a 6-dimensional action space. The network outputs logits for a categorical distribution over these 6 actions.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "798a234f-1e95-4d27-8d74-4b1eaee220a1",
                                    "requirements": "The FT-1 method has been implemented so that it continuously fine-tune a single NN across all tasks.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "f11da3aa-15e5-422f-aaf3-c1c7f2a26c62",
                            "requirements": "FT-N has been implemented for the Meta-World and ALE environments, as described in Section 5.2 and Appendix E.2.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "de8d83b9-639e-4c95-b473-6a8dea90ee08",
                                    "requirements": "The FT-N method has been implemented for the Meta-World environments, which is a randomly initialized MLP that maps a 39-dimensional state vector to two separate heads: one outputting the mean of a Gaussian distribution for each of the 4 actions and another outputting the log standard deviations.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "4fd52a4e-a799-428b-8910-cd799727240e",
                                    "requirements": "The FT-N method has been implemented for the ALE environments, which is a randomly intialized MLP mapping a 512-dimensional state vector to a 6-dimensional action space. The network outputs logits for a categorical distribution over these 6 actions.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "1b7ece23-8d81-446a-8af4-d468526c81e6",
                                    "requirements": "The logic to save model parameters after training on each task has been implemented.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "bce385fe-76ec-46e5-a00a-dc45d2eb984e",
                                    "requirements": "The logic to re-initialize the output heads at the beginning of each task has been implemented.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "f5efdade-f457-4936-b4ef-4d83d95d7708",
                            "requirements": "ProgressiveNet has been implemented, as described in Section 5.2 and Appendix E.2. TODO: Remove and replace with GitHub repo if existing implementation was adapted.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "b7dccfee-06e4-4f55-959a-05ce7545efa7",
                                    "requirements": "Logic to instantiate a new network (with random initial parameters) every time the task changes has been implemented.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "b363705b-edc3-4a6c-8d74-1883abb02bb6",
                                    "requirements": "Logic to add lateral connections (TODO: be more specific about what a lateral connection is after asking author) between the current network and the ones learned in previous tasks when a new network is added has been implemented.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "9ff4ad97-4f13-4af4-a1c0-e1dd19981e83",
                                    "requirements": "Logic to freeze the parameters of the neural networks trained on previous tasks has been implemented.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "21b4d6bc-062e-43ab-86a7-f3c98daf996e",
                                    "requirements": "Logic to save the parameters of the last neural network trained when the task changes has been implemented.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "a39fe09d-59d5-4ad8-876b-5e2c34006f9e",
                                    "requirements": "The input of every layer of the new network includes the outputs of all the layers from the networks learned in previous tasks.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "7b779283-7691-4a59-b4d5-334359cc482a",
                            "requirements": "PackNet has been implemented, as described in Section 5.2 and Appendix E.2. TODO: Remove and replace with GitHub repo if existing implementation was adapted.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "1cbbd1d1-e58f-4b33-907d-2d59fd9e1ca3",
                                    "requirements": "Logic to prune the trained network after each task has been implemented, selecting the weights that are most relevant for the current task, has been implemented.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "60c403cd-23cd-41d6-9a7b-a2713a5a33a5",
                                    "requirements": "Logic to retrain the pruned network for the current task has been implemented has been implemented.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "b4f5acb5-4faa-4346-bd80-cbc3f65bc5d7",
                                    "requirements": "Logic to freeze the selected parameters of the pruned network for the rest of the future tasks has been implemented.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "c5ff509c-087d-4cae-a1ff-63dad10de6b1",
                                    "requirements": "The number of iterations to retrain the model is set to 200k steps (i.e., 20% of the 1M timestep budget of each task).",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "57420140-abf8-45c7-ad1e-457a5f211253",
                                    "requirements": "Logic to decide how many parameters can be pruned and stored per task has been implemented, as described in Appendix E.2.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                }
                            ],
                            "task_category": null
                        }
                    ],
                    "task_category": null
                }
            ],
            "task_category": null
        },
        {
            "id": "ab934d15-7238-4a54-bec7-dc9b90783aac",
            "requirements": "Figure 3 has been reproduced.",
            "weight": 1,
            "sub_tasks": [
                {
                    "id": "ce7fdbb1-91a1-4f8b-9a59-5dda7e46240e",
                    "requirements": "The inference time (left) sub-figure has been reproduced.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "82e6b6ac-73f7-4c6c-963f-7bf20db11ff2",
                            "requirements": "TODO: Logic to create a sequence of 300 tasks has been implemented using X (e.g. Meta-World or ALE or both).",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "b52da4ce-9be2-4046-afdf-061da3fcf5bb",
                            "requirements": "CompoNet's inference time has been measured for an increasing number of tasks (from 1 up to 300, inclusive) whilst being trained on the Meta-World environments (TODO: Confirm this with the author). The measurements are conducted with the hyperparameters from Table E.1 and the caption of Figure 3 ([TODO: Confirm this with the author, remove once confirmed] giving precedence to the caption in the case of conflict), as described in Appendix C.2, with the results stored in a suitable data structure.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution"
                        },
                        {
                            "id": "043beaa5-0930-4535-866b-0cc8337649d4",
                            "requirements": "ProgressiveNet's inference time has been measured for an increasing number of tasks (from 1 up to 300, inclusive) whilst being trained on the Meta-World environments (TODO: Confirm this with the author). The measurements are conducted with the hyperparameters from Table E.1 and the caption of Figure 3 ([TODO: Confirm this with the author, remove once confirmed] giving precedence to the caption in the case of conflict), as described in Appendix C.2, with the results stored in a suitable data structure.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution"
                        },
                        {
                            "id": "56f8b909-59d1-4bec-93c2-f276d499694e",
                            "requirements": "The recorded results show that the inference time (in seconds) of ProgressiveNet grows quadratically.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis"
                        },
                        {
                            "id": "8d795b81-0cc9-41de-8d76-314ed523ff4e",
                            "requirements": "The recorded results show that the inference time (in seconds) of CompoNet grows slower than ProgressiveNet, with the gap widening as the number of tasks increases.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis"
                        }
                    ],
                    "task_category": null
                },
                {
                    "id": "690d1cd8-b21b-4d4a-80b4-1add3177ada1",
                    "requirements": "The growth of the number of parameters (right) sub-figure has been reproduced.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "8b74b662-4ec5-4b9c-a9ab-9f3276d75913",
                            "requirements": "TODO: Logic to create a sequence of 300 tasks has been implemented using X (e.g. Meta-World or ALE or both).",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "1f60a8c9-47d0-4b12-adf6-3cff221ba3df",
                            "requirements": "CompoNet's total and trainable parameter counts have been measured for an increasing number of tasks (from 1 up to 300, inclusive) whilst being trained on the Meta-World environments (TODO: Confirm this with the author). The measurements are conducted with the hyperparameters from Table E.1 and the caption of Figure 3 ([TODO: Confirm this with the author, remove once confirmed] giving precedence to the caption in the case of conflict), as described in Appendix C.2, with the results stored in a suitable data structure.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution"
                        },
                        {
                            "id": "3a78e866-1122-4dd4-a6e1-c2f65fbed097",
                            "requirements": "ProgressiveNet's total and trainable parameter counts have been measured for an increasing number of tasks (from 1 up to 300, inclusive) whilst being trained on the Meta-World environments (TODO: Confirm this with the author). The measurements are conducted with the hyperparameters from Table E.1 and the caption of Figure 3 ([TODO: Confirm this with the author, remove once confirmed] giving precedence to the caption in the case of conflict), as described in Appendix C.2, with the results stored in a suitable data structure.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution"
                        },
                        {
                            "id": "f0dafbe8-c135-44e6-a758-95a62a85cf02",
                            "requirements": "The recorded results show that the total parameter count of CompoNet grows (roughly) linearly.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis"
                        },
                        {
                            "id": "23a2aa0a-1970-4dc7-95ca-ebe70fb903c4",
                            "requirements": "The recorded results show that the trainable parameter count of CompoNet grows linearly.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis"
                        },
                        {
                            "id": "318d3eee-9f08-4b3b-ae34-e0bbc5d5b139",
                            "requirements": "The recorded results show that the total parameter count of ProgressiveNet grows quadratically.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis"
                        },
                        {
                            "id": "1df26f0a-7d45-4673-b0f4-caf4698bf86b",
                            "requirements": "The recorded results show that the trainable parameter count of ProgressiveNet grows quadratically.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Result Analysis"
                        }
                    ],
                    "task_category": null
                }
            ],
            "task_category": null
        },
        {
            "id": "52b8fb91-2c17-47ab-a4f7-41e628ebe09d",
            "requirements": "Table 1 has been reproduced.",
            "weight": 1,
            "sub_tasks": [
                {
                    "id": "b86dd7bc-a34f-4a8b-b132-80b5c6f3bc87",
                    "requirements": "All methods have been trained on the three task sequences (Meta-World, SpaceInvaders, Freeway) for 10 random seeds each, and the final metrics (average performance and forward transfer) have been saved.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "7786f030-aa87-4034-a2d6-0a124929ab5f",
                            "requirements": "All methods have been trained on the Meta-World sequence with 10 random seeds and the success rates for all methods, tasks and seeds have been saved.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "2c8982ab-c4f7-46c4-9086-f3e184898e3d",
                                    "requirements": "The baseline method has been trained on the Meta-World sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "dabaeb40-3ffd-48d6-a28d-b04ccbf351b5",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "066903cf-56bc-4aa1-8118-a12005ed0f9e",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "8036351f-b10a-4939-9b7d-1c7c65148801",
                                            "requirements": "The baseline method has been trained on the Meta-World sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "40f3d0f3-69b7-4c5b-a800-e412b3f16c93",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "7b3aaf9a-8e8e-48f2-b0c0-bd75b232bb69",
                                    "requirements": "The FT-1 method has been trained on the Meta-World sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "eb472db9-5135-44d7-af2c-c21a4cbbfe21",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "9451e9fd-24cd-4424-9219-2d856c05643b",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "70670ea3-ae33-447d-a616-606c714f1015",
                                            "requirements": "The FT-1 method has been trained on the Meta-World sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "68b39bd1-8e5c-4bc8-94f0-c260fd761df7",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "57a49715-812b-4b02-af91-f3b593f1e12c",
                                    "requirements": "The FT-N method has been trained on the Meta-World sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "700e4ef4-e38b-4803-907d-f4a9c7cf2b8b",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "4711b5df-5dc4-4ba3-a10d-a1ca33a73e1a",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "dd84f4ed-e5e6-45c9-9028-915b465f24e0",
                                            "requirements": "The FT-N method has been trained on the Meta-World sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "cae11072-9e07-4f63-b0cf-948d7ba2da8c",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "1beb6db7-2673-4edb-9647-f2bb3b14d551",
                                    "requirements": "The ProgressiveNet method has been trained on the Meta-World sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "30625bbc-8a06-4668-9436-322778e96ea4",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "b43f9fb7-149a-4414-ab3d-103474f78214",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "0405123a-7154-4003-b716-050b55a344b6",
                                            "requirements": "The ProgressiveNet method has been trained on the Meta-World sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "ae3146a2-d1b5-40e4-bc22-d299fc05d8ec",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "0c8dd556-bf7a-404c-8bfd-f5fb3cc673f1",
                                    "requirements": "The PackNet method has been trained on the Meta-World sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "9d20e815-7686-4924-841b-40463fa1b1c2",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "61ca21ef-87c0-4c63-bd8f-d77526afea15",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "f6993b3e-2a5e-4375-b92a-60daa1e6e169",
                                            "requirements": "The PackNet method has been trained on the Meta-World sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "3bd4f029-ef91-490e-9f02-12e4ca3d378c",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "52434944-70a2-4e55-b372-bdadc772734f",
                                    "requirements": "The CompoNet method has been trained on the Meta-World sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "7718e9e1-71a0-4d1e-9d90-76d4b0212af1",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "a648826d-bd2f-4192-adfe-4640bd9748ab",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "d5f9b44a-9d65-4974-bf55-91d86c690b38",
                                            "requirements": "The CompoNet method has been trained on the Meta-World sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "90c21094-09bd-462e-92fa-0ef7907ff1ed",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "1fa28c28-0dfb-4e20-96df-dab9ec5cef5f",
                            "requirements": "All methods have been trained on the SpaceInvaders sequence with 10 random seeds and the success rates for all methods, tasks and seeds have been saved.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "6e621861-c8bf-4448-aba2-c9d860195677",
                                    "requirements": "The baseline method has been trained on the SpaceInvaders sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "4cae0a3a-f411-4486-8abb-d4ba75b08db3",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "1504ba8d-3cd7-4384-b633-5363ecf1e72d",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "a1e3bc32-dcd3-4b3f-994a-5674da57adc5",
                                            "requirements": "The baseline method has been trained on the SpaceInvaders sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "a7c5323e-0aac-4977-898c-34246b2bf3a9",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "1b9d1597-e758-4df8-ad9b-bd148ff3652f",
                                    "requirements": "The FT-1 method has been trained on the SpaceInvaders sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "2bd5f28c-0d6b-46f1-a7f8-18aabf02d6bc",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "ce642948-5102-4718-805e-f966f19a5d5b",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "b86c0b3a-0b73-4260-bf92-85c8db218b2a",
                                            "requirements": "The FT-1 method has been trained on the SpaceInvaders sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "a965f76c-59eb-4b16-86a7-aeb8cddce8a6",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "5ee95ffe-e7a4-4d50-b967-606c14562b34",
                                    "requirements": "The FT-N method has been trained on the SpaceInvaders sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "fe1faf1b-aa2f-413d-9a1d-157c73d2912c",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "492ff920-96ed-42e9-a64c-f44b4a4377c6",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "5f9d4a61-2534-4f8e-a30b-a5b0402a9077",
                                            "requirements": "The FT-N method has been trained on the SpaceInvaders sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "c2527a83-2d29-4f46-959f-4f3387f73706",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "5e354259-957d-49c3-b8ac-50637aadeab0",
                                    "requirements": "The ProgressiveNet method has been trained on the SpaceInvaders sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "b773c1d6-8a03-45a6-86d4-258f83e283f7",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "5907a98f-b3db-4d81-8f09-ac1616e3524a",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "22259e64-ae90-482c-948f-b4abef319a5a",
                                            "requirements": "The ProgressiveNet method has been trained on the SpaceInvaders sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "095b2f89-c096-49d4-b94a-9c233860878c",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "01c5217a-bea7-461a-88e8-ef6a578ee592",
                                    "requirements": "The PackNet method has been trained on the SpaceInvaders sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "b5fee7bc-a717-447e-95f7-8e2f26d18f39",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "d759301e-34d3-4b0a-b848-75868481e26c",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "92a9974e-e8f5-46ef-8e7e-e88db75ca5ee",
                                            "requirements": "The PackNet method has been trained on the SpaceInvaders sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "f58282f6-4838-4847-8c56-b20fef5e97c0",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "f58ecbeb-6c59-46a8-b9ba-e45bb6a75059",
                                    "requirements": "The CompoNet method has been trained on the SpaceInvaders sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "68554bdf-415c-4d26-9b61-67aeaebc83f6",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "d8d72917-527b-4f80-bbb2-b8453364a47b",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "17775db7-f3bb-42ac-8c3f-072bc3cfd295",
                                            "requirements": "The CompoNet method has been trained on the SpaceInvaders sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "8353a180-2494-4418-89f9-5a623f5717c0",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "d6c1e02a-1252-4245-b144-d5cfc3099567",
                            "requirements": "All methods have been trained on the Freeway sequence with 10 random seeds and the success rates for all methods, tasks and seeds have been saved.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "6c60304f-84b5-4351-8d8d-82854bbf1eeb",
                                    "requirements": "The baseline method has been trained on the Freeway sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "7a67fb64-e1ec-4b8a-b851-627d13c09be6",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "09d2eeb3-61bc-4199-87f4-ba1c057fef3e",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "3a8dbbae-fd7b-4e72-abd7-45bb43fe6a4b",
                                            "requirements": "The baseline method has been trained on the Freeway sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "6b42c4a3-b154-4081-90fa-549c842d6e0b",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "a6799061-ab7c-4e00-9c29-be54fc4998ce",
                                    "requirements": "The FT-1 method has been trained on the Freeway sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "01488f67-5d87-4099-926b-facc9d36cc36",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "cdbd9710-288a-4a37-b729-c5c7587be0cd",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "1603bab6-b73f-40f7-8e86-30d3bce8e320",
                                            "requirements": "The FT-1 method has been trained on the Freeway sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "e4ebeeb5-501f-438d-b913-f67ad2e06ab5",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "ad36ddc9-2593-4c5d-b5f6-4ef9b3fee93c",
                                    "requirements": "The FT-N method has been trained on the Freeway sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "d61db658-ea2a-4ac1-acb4-fb3e20209685",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "7555d599-94f4-4b5d-ad00-0a903874cda5",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "8e5f55ac-9f45-4f42-82bb-6981ce0b5439",
                                            "requirements": "The FT-N method has been trained on the Freeway sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "f7d07e22-288d-4ce1-9b09-959049f24191",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "86418d10-1038-4276-b124-0f6e82c26147",
                                    "requirements": "The ProgressiveNet method has been trained on the Freeway sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "61cb9780-690b-4089-ace0-d0ec3d3f97a8",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "c5442170-3c69-4291-86c3-0052de16709c",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "e91b4c0b-149c-463f-8ace-071c11f62e48",
                                            "requirements": "The ProgressiveNet method has been trained on the Freeway sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "e18fac10-67ed-4ac8-9603-440b2c034ba6",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "386b8609-c410-4a81-bc65-7d6506982c7c",
                                    "requirements": "The PackNet method has been trained on the Freeway sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "7ea912da-7f8b-43a5-8324-03e9e202bcda",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "c1765eed-a025-4678-86b3-8699ef704048",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "b04f9b98-31cc-4cf0-9d68-bbe40d7001e8",
                                            "requirements": "The PackNet method has been trained on the Freeway sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "c2a01219-92e0-4401-8a54-2db1d173c8c6",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "78fb7f2b-d3c9-4cab-bc21-5b12b4b89fbd",
                                    "requirements": "The CompoNet method has been trained on the Freeway sequence of tasks, and the success rates have been saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "dd047fca-a742-4f6f-90a8-2fe069df3ead",
                                            "requirements": "A total of 10 random seeds have been set before each training run.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Development"
                                        },
                                        {
                                            "id": "3e25f5ab-bec4-4aba-a4e7-eacd5f7b22cb",
                                            "requirements": "A total of 1M timesteps have been used per task.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "f04bc474-d56e-40e3-bfe2-f479807bee0d",
                                            "requirements": "The CompoNet method has been trained on the Freeway sequence of tasks for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "26a9496e-d671-475a-9267-e57c9cfc978f",
                                            "requirements": "The success rates for each task and seed has been recorded.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "15067927-78c4-4c88-b141-e55c48d21df4",
                            "requirements": "The average performance metric has been computed for each method and seed (i.e., 50 metrics in total).",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution"
                        },
                        {
                            "id": "a8a243b1-007f-4f35-a6e9-31e41fb88c6b",
                            "requirements": "The forward transfer metric has been computed for each method and seed (i.e., 50 metrics in total).",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution"
                        }
                    ],
                    "task_category": null
                },
                {
                    "id": "ddd24b5c-d32b-4b21-b7f0-e6db01fbfc05",
                    "requirements": "The mean and standard deviation of the average performance and forward transfer metrics have been computed for every method and every task sequence across all 10 seeds using the saved results.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Execution"
                },
                {
                    "id": "319edc0d-4cf8-4a71-933c-49f4155a2588",
                    "requirements": "The mean average performance metrics show that CompoNet preforms at least as well as all other methods (higher is better) across all three task sequences.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Result Analysis"
                },
                {
                    "id": "0d79cc8d-c8b2-4e97-a910-95090cd2338b",
                    "requirements": "The mean forward transfer metrics show that CompoNet preforms at least as well as all other methods (higher is better) across all three task sequences.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Result Analysis"
                }
            ],
            "task_category": null
        },
        {
            "id": "dcd25435-fa83-4ab3-bd28-6eedaec93fa4",
            "requirements": "Figure 4 has been reproduced.",
            "weight": 1,
            "sub_tasks": [
                {
                    "id": "96bf2ae6-8194-4535-9b25-7d078434ddb2",
                    "requirements": "Code to compute and save the episodic returns at regular intervals (at least every 10k timesteps) for each seed has been implemented.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development"
                },
                {
                    "id": "6995dcdb-e1fb-443b-a5cf-f9a51e1d04b0",
                    "requirements": "Code to compute whether the action with the highest probability from distribution matches the action with the highest probability from another distribution has been implemented.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development"
                },
                {
                    "id": "985db9fe-0c97-4b2e-8025-a27d5f446ca3",
                    "requirements": "Code to compute and save the matching rate between two distributions at least every 10k timesteps for each seed has been implemented.",
                    "weight": 1,
                    "sub_tasks": [],
                    "task_category": "Code Development"
                },
                {
                    "id": "3b2fc657-f884-4f7a-8196-9c1aba02da5b",
                    "requirements": "Figures 4 (a) - (d) have been reproduced. CompoNet is trained on the 5th task (i.e., the 4th playing mode) of SpaceInvaders with four non-informative previous policies and one policy trained to solve the current task. The relevant plots (episodic return, matching rate, input attention head, and output attention head) have been generated, matching Figures 4(a)-(d).",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "4dca3b7d-1188-4337-961e-dd6a0d5ac1f7",
                            "requirements": "A total of 10 random seeds have been set before each training run.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "b777444f-44ac-45fd-abf4-25162b3911fb",
                            "requirements": "A single informative policy (i.e., one that provides relevant knowledge for solving a future task) has been pre-trained on the 5th task (i.e., the 4th playing mode) of SpaceInvaders using the SAC algorithm and the hyperparameters in Table E.1 (TODO: Confirm with author), with its weights saved for later reuse.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution"
                        },
                        {
                            "id": "feec8fca-32d5-47d1-b5f5-6c9e0f5338b0",
                            "requirements": "Four non-informative policies have been defined and implemented to act as random policies i.e., they each sample an action from a uniform Dirichlet distribution.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "d6f3c887-c749-4481-b0a8-018e64e6041b",
                            "requirements": "CompoNet was trained on the 5th task (i.e., the 4th playing mode) of SpaceInvaders for 1M timesteps per seed using the SAC algorithm, the hyperparameters in Table E.1 (TODO: Confirm with the author), and the five previous policies (four non-informative and one informative) as input, with the parameters of all previous policies kept frozen.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "5f0ec7d2-cc32-4378-bea1-56b1ff9883c9",
                                    "requirements": "A new CompoNet module has been instantiated for the 5th task of SpaceInvaders, referencing the four non-informative modules and the single informative module as its (frozen) predecessors, ensuring the parameters of all previous modules are frozen.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "75042767-b7b9-4225-8297-f082f7390dc3",
                                    "requirements": "The newly added CompoNet module has been trained for 1M timesteps on the 5th task of SpaceInvaders using the SAC algorithm, while keeping the parameters of all previous modules frozen.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "4f725a8e-0163-4a5c-b99a-52de8a26aefd",
                            "requirements": "The baseline method was trained on the 5th task (i.e., the 4th playing mode) of SpaceInvaders for 1M timesteps per seed using the SAC algorithm and the hyperparameters in Table E.1 (TODO: Confirm with the author, remove once confirmed).",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution"
                        },
                        {
                            "id": "aadec021-dfe0-4f11-8074-8b6d593438ad",
                            "requirements": "Figure 4 (a) has been reproduced.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "cade2638-ae08-422d-8907-fd6d44d03c6b",
                                    "requirements": "The necessary metrics to reproduce Figure 4 (a) have been computed and saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "ca4ae1dd-5250-4b07-a40d-4995876fab3a",
                                            "requirements": "The episodic returns have been computed at regular intervals (at least every 10k timesteps) and saved during training of the baseline method for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "d1993d1e-d8c6-4ec0-bd8d-74d21fef01b5",
                                            "requirements": "The episodic returns have been computed at regular intervals (at least every 10k timesteps) and saved during training of CompoNet for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "c0916ef4-ee7a-43a0-9923-8004a18cd67c",
                                    "requirements": "The saved episodic returns for CompoNet show that the mean episodic returns sharply increases within the first 200k timesteps, then plateaus at around 600.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "d7e80724-6356-4172-b3e1-bfd2accdfc0c",
                                    "requirements": "The saved episodic returns for the baseline method show that the mean episodic returns steadily increases over time, eventually reaching an episodic return of around 400 by the 1M timestep mark.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "81ee73cd-a224-4b31-bc1c-546eb8860554",
                            "requirements": "Figure 4 (b) has been reproduced.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "7a58e9fb-55d6-4902-84ae-976f9bd1a459",
                                    "requirements": "The necessary metrics to reproduce Figure 4 (b) have been computed and saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "adc3939d-e953-4805-849c-193864b8ba0f",
                                            "requirements": "The output attention head of CompoNet has computed a probability distribution over actions at each time step for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "dea1e542-e600-4629-b27e-d47dc20a99be",
                                            "requirements": "The output of the internal policy of CompoNet has computed a probability distribution over actions at each time step for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "eda7a58b-1475-4a8b-9d8c-931a46d95324",
                                            "requirements": "The final output of CompoNet has computed a probability distribution over actions at each time step for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "0af6f01e-d9e4-461f-9b2d-63a2565f749d",
                                            "requirements": "Whether the action with the highest probability from the final output matched the action with the highest probability from the output attention head has been computed at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "0628371d-9640-4391-aa6a-79ce7602ebff",
                                            "requirements": "Whether the action with the highest probability from the final output matched the action with the highest probability from the internal policy has been computed at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "37e30601-de1c-44e3-a550-8b1358be11e3",
                                            "requirements": "Whether the action with the highest probability from the output attention head matched the action with the highest probability from the internal policy has been computed at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "ba053a2d-adbc-413f-bd0e-0d86ebe0a741",
                                            "requirements": "The matching rate for the final output and the output attention head has been computed and saved at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "f4b0b8c0-5a4d-48b4-bcc9-ad94b6a78559",
                                            "requirements": "The matching rate for the final output and the internal policy has been computed and saved at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "50893fbd-65ab-44b7-83da-7bbc26f84c23",
                                            "requirements": "The matching rate for the final output and the internal policy has been computed and saved at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "4a93d5d7-0ac9-482b-a1ec-fbd7247c9c52",
                                    "requirements": "The mean matching rate of the final output and the output head shows that, in the initial timesteps, the final output of the model matches with the result of the output attention head, and the internal policy is barely used.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "6c83fb26-cf32-496c-9966-42789b5411e8",
                                    "requirements": "The mean matching rate of the final output and the output head shows that, after several timesteps, the internal policy learns to imitate the result of the output attention head, which is mostly used as the final output of the model.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "07bc1edc-970e-47d1-8e3b-7321f1e80c2f",
                            "requirements": "Figure 4 (c) has been reproduced.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "b13dd2f9-a6c5-45d2-90e1-3a9ffd0c0be7",
                                    "requirements": "The necessary metrics to reproduce Figure 4 (c) have been computed and saved,",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "44e32f85-016d-404e-8605-6700774b3e9c",
                                            "requirements": "The input attention head's attention distribution (i.e., the output of the softmax) over the rows of $P$ has been computed at regular intervals (at least every 10k timesteps) during the training loop of CompoNet for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "c20e0d24-aabb-4450-b3be-d8c6d743b505",
                                            "requirements": "The input attention head's attention distributions over the rows of $P$ has been saved at regular intervals (at least every 10k timesteps) for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "e30a1f3d-2374-4be5-b66f-ce3b2b716154",
                                    "requirements": "The mean of the input head's attention scores for all four non-informative policies drops to around 0.0 within the first 10k timesteps and stays at around 0.0 thereafter.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "af8a20c1-c252-4a5b-a9b7-28c311a59592",
                                    "requirements": "The mean input head's attention scores for the informative policy plateaus at roughly 0.16 within the first 200k timesteps and stays at roughly 0.16 thereafter.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "a96a3a08-2624-4174-bced-17ee5437a0de",
                                    "requirements": "The mean input head's attention scores for the output attention head sharply increases over the first 200k timesteps then plateaus at roughly 0.8 and stays at roughly 0.8 thereafter.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "a650c9b8-7950-4e7e-b669-14b294b95fdd",
                            "requirements": "Figure 4 (d) has been reproduced.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "74baddce-9cd7-49f0-af6b-ba25273fcaf6",
                                    "requirements": "The necessary metrics to reproduce Figure 4 (d) have been computed and saved.",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "b92a3750-8f72-4460-b46c-f9cf8ea6014b",
                                            "requirements": "The output attention head's attention distribution (i.e., the output of the softmax) over all previous policies has been computed at regular intervals (at least every 10k timesteps) during CompoNet training for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "d6ae56b2-c763-4ac3-80be-d0758d5869c9",
                                            "requirements": "The output attention head's attention distributions have been saved at regular intervals (at least every 10k timesteps) for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "bf94fcd9-5ab6-43cd-8854-6bf9e921a665",
                                    "requirements": "The mean of the output head's attention scores for all four non-informative policies drops to around 0.0 within the first 10k timesteps and stays at around 0.0 thereafter.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "1037dc3f-5e4b-41c0-9125-b227f96c5195",
                                    "requirements": "The mean output head's attention scores for the informative policy sharply increases to 1.0 within the first 10k timesteps, plateaus at 1.0 and stays at 1.0 thereafter.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                }
                            ],
                            "task_category": null
                        }
                    ],
                    "task_category": null
                },
                {
                    "id": "df72e036-546f-4f3c-bf5e-cbed1ef2345f",
                    "requirements": "Figures 4 (e) - (h) have been reproduced. CompoNet is trained on the 6th task (i.e., the 5th playing mode) of SpaceInvaders with five non-informative previous policies.",
                    "weight": 1,
                    "sub_tasks": [
                        {
                            "id": "a52a28e5-be1f-40f3-9784-734978d353d8",
                            "requirements": "A total of 10 random seeds have been set before each training run.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "a16cd6bb-5d47-45b0-995f-81f3485997bd",
                            "requirements": "Five non-informative policies have been defined and implemented to act as random policies i.e., they each sample an action from a uniform Dirichlet distribution.",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Development"
                        },
                        {
                            "id": "64396b89-af34-4d26-a422-f6d557245518",
                            "requirements": "CompoNet was trained on the 6th task (i.e., the 5th playing mode) of SpaceInvaders for 1M timesteps per seed using the SAC algorithm, the hyperparameters in Table E.1 (TODO: Confirm with the author, remove once confirmed), and the five previous policies (four non-informative and one informative) as input, with the parameters of all previous policies kept frozen.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "a377e3c6-61c8-405f-8459-699347bef89a",
                                    "requirements": "A new CompoNet module has been instantiated for the 6th task (i.e., the 5th playing mode) of SpaceInvaders, referencing the 5 non-informative policies as its predecessors.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Development"
                                },
                                {
                                    "id": "57fe4f9d-e36d-4b55-80c3-23e3fa442292",
                                    "requirements": "The newly added CompoNet module has been trained for 1M timesteps on the 6th task (i.e., the 5th playing mode) of SpaceInvaders using the SAC algorithm.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Code Execution"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "315a31da-6a39-4be1-881b-4e5a29d46413",
                            "requirements": "The baseline method was trained on the 6th task (i.e., the 5th playing mode) of SpaceInvaders for 1M timesteps per seed using the SAC algorithm and the hyperparameters in Table E.1 (TODO: Confirm with the author, remove once confirmed).",
                            "weight": 1,
                            "sub_tasks": [],
                            "task_category": "Code Execution"
                        },
                        {
                            "id": "84f8e82d-8aa8-4f6c-8504-e471f36f298c",
                            "requirements": "Figure 4 (e) has been reproduced.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "a2c435fb-4ace-4704-b0b3-755de390d0aa",
                                    "requirements": "The necessary metrics have computed and saved to reproduce Figure 4 (e).",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "231696e0-c9bb-404e-b96f-985dcbd376cb",
                                            "requirements": "The episodic returns have been computed at regular intervals (at least every 10k timesteps) and saved during training of the baseline method for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "17f0e736-c600-4608-ad0c-0513fcc8bd14",
                                            "requirements": "The episodic returns have been computed at regular intervals (at least every 10k timesteps) and saved during training of CompoNet for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "19014129-a2a7-4e37-b03e-de87cd22da3b",
                                    "requirements": "The saved episodic returns for CompoNet show that the mean episodic returns increases steadily with time, exceeding 400 by 1M timesteps.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "b64840ed-52f0-42d3-8fa9-32760c524211",
                                    "requirements": "The saved episodic returns for the baseline method show that the mean episodic returns increases steadily with time, falling short of the mean episodic returns of CompoNet at the 1M timestep mark.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "321d45d5-7be6-4ddb-ac3b-78b4881e9cb6",
                            "requirements": "Figure 4 (f) has been reproduced.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "222d4b5e-a07d-4c29-9a8e-d522a02dd898",
                                    "requirements": "The necessary metrics have computed and saved to reproduce Figure 4 (f).",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "b68b1fa6-fc9e-4f4e-9b14-edddc40c6eb4",
                                            "requirements": "The output attention head of CompoNet has computed a probability distribution over actions at each time step for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "82686c84-e70e-4c14-a56e-353091dab34a",
                                            "requirements": "The output of the internal policy of CompoNet has computed a probability distribution over actions at each time step for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "f2ea520b-b055-4f37-99e5-ed10f6164317",
                                            "requirements": "The final output of CompoNet has computed a probability distribution over actions at each time step for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "c95e4ce4-330f-4c77-9873-7680ac1f7a40",
                                            "requirements": "Whether the action with the highest probability from the final output matched the action with the highest probability from the output attention head has been computed at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "ebb72e34-6286-440d-8d90-b3f2c4499818",
                                            "requirements": "Whether the action with the highest probability from the final output matched the action with the highest probability from the internal policy has been computed at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "f9065e30-749d-4463-9210-931d20dfc599",
                                            "requirements": "Whether the action with the highest probability from the output attention head matched the action with the highest probability from the internal policy has been computed at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "10a23066-6d45-40b7-b14d-208eca4177e1",
                                            "requirements": "The matching rate for the final output and the output attention head has been computed and saved at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "4d4c1c72-7f6e-48e1-baa5-40e24cd61062",
                                            "requirements": "The matching rate for the final output and the internal policy has been computed and saved at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "c4f84600-bd06-464d-bf96-c10f8e926039",
                                            "requirements": "The matching rate for the final output and the internal policy has been computed and saved at least every 10k timesteps for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "5adbab63-7b1a-4208-92f4-d30ffbcd4b89",
                                    "requirements": "The mean matching rate of the final output and the output attention head sharply increases to exceed 0.8 (out of a maximum 1.0) within 10k timesteps then plateaus between 0.8 and 1.0.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "0bcc219f-78ce-4579-88b9-923345365d52",
                                    "requirements": "The mean matching rate of the final output and the internal policy is fairly stable at around 0.125 plus or minus 0.125 (out of a maximum 1.0) from the 10k timestep mark to the 300k timestep mark.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "ba39e346-3237-4c5b-87bd-769c4cde7395",
                                    "requirements": "The mean matching rate of the output head and the internal policy is fairly stable at around 0.125 plus or minus 0.125 (out of a maximum 1.0) from the 10k timestep mark to the 300k timestep mark.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "2c237954-542f-4597-b388-042babda1840",
                                    "requirements": "The mean matching rates show that the final output of the model is completely determined by the internal policy after a few training steps, effectively overwriting the result of the output attention head.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "5b03af5d-1a9d-4015-bdb0-41e386b49a51",
                            "requirements": "Figure 4 (g) has been reproduced.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "653e5c6b-bc20-4049-bdca-130a39a503dc",
                                    "requirements": "The necessary metrics have computed and saved to reproduce Figure 4 (g).",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "f869125d-bead-4e59-b8b5-978c7cb04f5b",
                                            "requirements": "The input attention head's attention distribution (i.e., the output of the softmax) over the rows of $P$ has been computed at regular intervals (at least every 10k timesteps) during the training loop of CompoNet for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "1fdca623-492f-432e-9f14-06c2cec7a476",
                                            "requirements": "The input attention head's attention distributions over the rows of $P$ has been saved at regular intervals (at least every 10k timesteps) for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "652b7dd2-1c6c-40ef-ba1c-ae2b54204ad9",
                                    "requirements": "The mean of the input head's attention scores for all 5 non-informative policies is stable at 0.18 plus or minus 0.125 across all timesteps.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "56f1bf39-4aed-499d-a77b-5cdafb5e9c7b",
                                    "requirements": "The mean input head's attention scores for the output attention head is stable at 0.18 plus or minus 0.125 across all timesteps.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "f846df13-9668-4c25-86ed-1868d672d5e8",
                                    "requirements": "No one head has significantly (i.e. > 0.125) higher mean attention scores at any timestep.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                }
                            ],
                            "task_category": null
                        },
                        {
                            "id": "82e82985-3e5d-4e7c-8168-033680d59d6b",
                            "requirements": "Figure 4 (h) has been reproduced.",
                            "weight": 1,
                            "sub_tasks": [
                                {
                                    "id": "82212fd0-9d5e-443a-a330-b18c17ff79b3",
                                    "requirements": "The necessary metrics have computed and saved to reproduce Figure 4 (h).",
                                    "weight": 1,
                                    "sub_tasks": [
                                        {
                                            "id": "c42318bd-1e41-4eb3-a5f7-185275ea482c",
                                            "requirements": "The output attention head's attention distribution (i.e., the output of the softmax) over all previous policies has been computed at regular intervals (at least every 10k timesteps) during CompoNet training for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        },
                                        {
                                            "id": "2a1284a1-91dc-45e3-a19f-e500c945c567",
                                            "requirements": "The output attention head's attention distributions have been saved at regular intervals (at least every 10k timesteps) for each seed.",
                                            "weight": 1,
                                            "sub_tasks": [],
                                            "task_category": "Code Execution"
                                        }
                                    ],
                                    "task_category": null
                                },
                                {
                                    "id": "b91fef48-1fe0-481e-b37d-deea55144945",
                                    "requirements": "The mean of the output head's attention scores for all 5 non-informative policies is stable at 0.2 plus or minus 0.125 across all timesteps.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                },
                                {
                                    "id": "9e0900d2-45e9-47e1-9747-6a219abded90",
                                    "requirements": "No one head has significantly (i.e. > 0.125) higher mean attention scores at any timestep.",
                                    "weight": 1,
                                    "sub_tasks": [],
                                    "task_category": "Result Analysis"
                                }
                            ],
                            "task_category": null
                        }
                    ],
                    "task_category": null
                }
            ],
            "task_category": null
        }
    ],
    "task_category": null
}